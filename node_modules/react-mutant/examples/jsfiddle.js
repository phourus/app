var Mutant = function Mutant (defaults, options) {   
    var parent = this;
    var _evts = [];
    var methods = {};
    if (options && options.mixins) {
        methods = options.mixins;
    }
    for (var k in defaults) {
        this[k] = defaults[k];
    }
    methods.set = function (obj) {
        for (var k in obj) {
            parent[k] = obj[k];
        }
        if (options && options.validate) {
            console.log(options.validate);   
            //console.log(options.validate.color());   
        }
        methods.trigger("update", parent);
    };
    methods.on = function (trigger, cb) {
        _evts[trigger] = cb;
    };
    methods.trigger = function (trigger, data) {
        if (_evts[trigger]) {
            _evts[trigger].call(this, data);
        } 
    };
    this.mutant = methods;
    return this;
};

var post = new Mutant({
	id: 0,
	title: "",
	content: ""
});
var comments = new Mutant({
	comments: []
});

var App = React.createClass({
	getDefaultProps: function () {
		return {
			post: post,
			comments: comments
		}
	},
    componentWillMount: function () {
        var self = this;
        post.mutant.on("update", function (data) {
            self.setProps({post: data});
        });
        comments.mutant.on("update", function (data) {
            self.setProps({comments: data});
        });
    },
    /*
	propTypes: {
		post: React.PropTypes.shape({
			id: React.PropTypes.number,
			title: React.PropTypes.string,
			content: React.PropTypes.string,
			mutant: React.PropTypes.instanceOf(Mutant)
		}),
		comments: React.PropTypes.shape({
			comments: React.PropTypes.array,
			mutant: React.PropTypes.instanceOf(Mutant)
		})
	},*/
	render: function () {
        return (
			<div className="app">
				<Post {...this.props.post} />
				<Comments {...this.props.comments} />
			</div>
		);
	}
});

var Post = React.createClass({
	componentDidMount: function () {
        this.props.mutant.set({id: 1, title: "title", content: "content"});
    },
    render: function () {
		return (
			<div className="post">
                hasfasdf
				<h1>{this.props.title}</h1>
				<p>{this.props.content}</p>
			</div>
		);
	}
});

var Comments = React.createClass({
	add: function () {
        var current = this.props.comments;
        current.push({username: "me", date: "now", comment: "comment"});
        this.props.mutant.set({comments: current});
    },
    remove: function (index, e) {   
        var current = this.props.comments;
        current.splice(index, 1);
        console.log(current);
        this.props.mutant.set({comments: current});
    },
    render: function () {
		var i = -1;
        var remove = this.remove;
        var comments = this.props.comments || [];
		var list = comments.map(function (comment) {
			i++;
            comment.index = i;
            return <Comment key={i} {...comment} remove={remove} />
		});
		return (
			<div className="comments">
                <button onClick={this.add}>Add Comment</button>
				{list}
			</div>
		);
	}
});

var Comment = React.createClass({
    propTypes: {
		index: React.PropTypes.number,
        username: React.PropTypes.string,
		date: React.PropTypes.string,
		comment: React.PropTypes.string
	},
	render: function () {
		return (
			<div className="comment">
                <div>{this.props.index}</div>
				<div>{this.props.username}</div>
				<div>{this.props.date}</div>
				<div>{this.props.comment}</div>
                <button onClick={this.props.remove.bind(null, this.props.index)}>Remove</button>
			</div>
		);
	}
});

React.render(<App />, document.getElementById("app"));