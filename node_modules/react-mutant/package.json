{
  "name": "react-mutant",
  "version": "0.1.0",
  "description": "An easy way to update props in ReactJS",
  "main": "index.js",
  "scripts": {
    "test": "jest",
    "build": "gulp"
  },
  "keywords": [
    "reactjs",
    "setProps",
    "cortex"
  ],
  "author": {
    "name": "Jesse Drelick",
    "email": "info@jessedrelick.com"
  },
  "license": "MIT",
  "devDependencies": {
    "gulp": "^3.8.11",
    "jest": "^0.1.37",
    "jest-cli": "^0.4.0",
    "vinyl-source-stream": "^1.0.0"
  },
  "jest": {
    "testDirectoryName": "tests"
  },
  "readme": "# React-Mutant \n\nReact-Mutant piggybacks your props to make nested updates easy in React. Instead of passing 'update' handlers into all components needing to update root component properties, React-Mutant can be used instead.\n\n* Simpler solution than Flux, though not as robust. Ideal for smaller to mid-size applications or isolated components\n* Inspired by Cortex <http://https://github.com/mquan/cortex>\n* Built-in listener for root component/top-down updates\n* Provide your own mixin methods to extend the React-Mutant instance\n\n# Example\n\nJSFiddle Live Example: <http://jsfiddle.net/69z2wepo/2975/>\n\n\t// Create Mutant Objects with default properties\n\tvar postMutant = new Mutant({\n\t\tid: 0,\n\t\ttitle: \"\",\n\t\tcontent: \"\"\n\t});\n\tvar commentsMutant = new Mutant({\n\t\tcomments: []\n\t});\n\t\n\t// Root-level component\n\tvar App = React.createClass({\n\t    // validate properties as your normally would\n\t    propTypes: {\n\t        post: React.PropTypes.shape({\n\t            id: React.PropTypes.number,\n\t            title: React.PropTypes.title,\n\t            content: React.PropTypes.content\n\t        }),\n\t        comments: React.PropTypes.shape({\n\t            comments: React.PropTypes.array\n\t        })\n\t    },\n\t    // set default props to Mutant objects\n\t    getDefaultProps: function () {\n\t\t\treturn {\n\t\t\t\tpost: postMutant,\n\t\t\t\tcomments: commentsMutant\n\t\t\t}\n\t\t},\n\t    // listen to 'update' events, pass in updated mutant and set root props to new mutant\n\t    componentWillMount: function () {\n\t        var self = this;\n\t        postMutant.mutant.on(\"update\", function (newMutant) {\n\t            self.setProps({post: newMutant});\n\t        });\n\t        commentsMutant.mutant.on(\"update\", function (newMutant) {\n\t            self.setProps({comments: newMutant});\n\t        });\n\t    },\n\t    // {...this.props.post} = mutant object we created for post\n\t    // {...this.props.comments} = mutant object we created for comments\r\n\t\trender: function () {\n\t        return (\n\t\t\t\t<div className=\"app\">\n\t\t\t\t\t<Post {...this.props.post} />\n\t\t\t\t\t<Comments {...this.props.comments} />\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t});\n\n\tvar Post = React.createClass({\n\t\tcomponentDidMount: function () {\n\t\t  // once mounted, use post.mutant.set to update props and trigger root-level 'update'\r\n\t        this.props.mutant.set({id: 1, title: \"title\", content: \"content\"});\n\t    },\n\t    render: function () {\n\t\t\treturn (\n\t\t\t\t<div className=\"post\">\n\t\t\t\t\t<h1>{this.props.title}</h1>\n\t\t\t\t\t<p>{this.props.content}</p>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t});\n\n\tvar Comments = React.createClass({\n\t\tadd: function () {\n\t        var current = this.props.comments;\n\t        current.push({username: \"me\", date: \"now\", comment: \"comment\"});\n\t        this.props.mutant.set({comments: current});\n\t    },\n\t    remove: function (index, e) {   \n\t        var current = this.props.comments;\n\t        current.splice(index, 1);\n\t        this.props.mutant.set({comments: current});\n\t    },\n\t    render: function () {\n\t\t\tvar i = -1;\n\t        var remove = this.remove;\n\t        var comments = this.props.comments || [];\n\t\t\tvar list = comments.map(function (comment) {\n\t\t\t\ti++;\n\t            comment.index = i;\n\t            return <Comment key={i} {...comment} remove={remove} />\n\t\t\t});\n\t\t\treturn (\n\t\t\t\t<div className=\"comments\">\n\t                <button onClick={this.add}>Add Comment</button>\n\t\t\t\t\t{list}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t});\n\n\tvar Comment = React.createClass({\n\t    propTypes: {\n\t\t\tindex: React.PropTypes.number,\n\t        username: React.PropTypes.string,\n\t\t\tdate: React.PropTypes.string,\n\t\t\tcomment: React.PropTypes.string\n\t\t},\n\t\trender: function () {\n\t\t\treturn (\n\t\t\t\t<div className=\"comment\">\n\t                <div>{this.props.index}</div>\n\t\t\t\t\t<div>{this.props.username}</div>\n\t\t\t\t\t<div>{this.props.date}</div>\n\t\t\t\t\t<div>{this.props.comment}</div>\n\t                <button onClick={this.props.remove.bind(null, this.props.index)}>Remove</button>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t});\n\n\tReact.render(<App />, document.getElementById(\"app\"));\n\n\n# Cortex comparison\n\nFeature\t\t| Mutant\t| Cortex\n----------------|---------------|----------\nAccess prop values | Standard | .getValue()\nWorks with React PropType validation out of the box | Yes | No\nArray & Hash methods | No | Yes\nUpdate Root Component easily | Yes | Yes\nCallbacks | Yes | Yes\nDeeply Nested Updates | Not yet | Yes\n.getChanges() | .history() instead | Yes\n.didChange() | .set() returns false instead | Yes\nBatch updates | Not Yet | Yes\n.remove() | No | Yes\nNPM | Yes | Yes\nES6 | No | Yes\nBower | No | Yes\nCDN | Not Yet | No\n\n# Key Differences\n\nThe three primary reasons for creating React-Mutant over Cortex are:\n\n1. No need to use .getValue() when accessing prop values\n2. Works with React.PropTypes validation out of the box\n3. Lighter objects by not including Hash/Array methods\n\n# Nested Updates\nAlso, though not currently supported, future releases would like to include deeply nested updates. \n\nSo instead of:\n\n    mymutant.mutant.set({root: {level1: {level2: {level3: \"newvalue\"}}}});\n\nYou'll be able to:\n\n    mymutant.mutant.root.level1.level2.level3.set(\"newvalue\");\n    \n",
  "readmeFilename": "README.md",
  "_id": "react-mutant@0.1.0",
  "_shasum": "b673cb7afd5ee839230fdb24b937f6c2296bfb7b",
  "_resolved": "https://registry.npmjs.org/react-mutant/-/react-mutant-0.1.0.tgz",
  "_from": "https://registry.npmjs.org/react-mutant/-/react-mutant-0.1.0.tgz"
}
